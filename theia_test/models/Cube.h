namespace Cube
{
  struct Vertex
  {
    glm::vec3 position;
    glm::vec3 normal;
  };
  static const size_t VertexDeclData[] =
  {
    sizeof(Vertex), // vertex stride
    2,  // # elements

   GL_FLOAT, 3, offsetof(Vertex, position),
   GL_FLOAT, 3, offsetof(Vertex, normal)
  };

  static const VertexDeclaration* VertexDecl = (const VertexDeclaration*)VertexDeclData;

  static const Vertex Vertices[] =
  {
    { glm::vec3(1.000000, 1.000000, -1.000000    ), glm::vec3( 0.000000, -0.000000, 1.000000   ) },
    { glm::vec3(-1.000000, -1.000000, -1.000000  ), glm::vec3(   0.000000, -0.000000, 1.000000 ) },
    { glm::vec3(1.000000, -1.000000, -1.000000   ), glm::vec3(  0.000000, -0.000000, 1.000000  ) },
    { glm::vec3(1.000000, 0.999999, 1.000000     ), glm::vec3(0.000000, -0.000000, -1.000000   ) },
    { glm::vec3(-1.000000, -1.000000, 1.000000   ), glm::vec3(  0.000000, -0.000000, -1.000000 ) },
    { glm::vec3(-1.000000, 1.000000, 1.000000    ), glm::vec3( 0.000000, -0.000000, -1.000000  ) },
    { glm::vec3(1.000000, 1.000000, -1.000000    ), glm::vec3( -1.000000, 0.000001, 0.000000   ) },
    { glm::vec3(0.999999, -1.000001, 1.000000    ), glm::vec3( -1.000000, 0.000001, 0.000000   ) },
    { glm::vec3(1.000000, 0.999999, 1.000000     ), glm::vec3(-1.000000, 0.000001, 0.000000    ) },
    { glm::vec3(1.000000, -1.000000, -1.000000   ), glm::vec3(  0.000000, 1.000000, 0.000000   ) },
    { glm::vec3(-1.000000, -1.000000, 1.000000   ), glm::vec3(  0.000000, 1.000000, 0.000000   ) },
    { glm::vec3(0.999999, -1.000001, 1.000000    ), glm::vec3( 0.000000, 1.000000, 0.000000    ) },
    { glm::vec3(-1.000000, -1.000000, -1.000000  ), glm::vec3(   1.000000, -0.000000, 0.000000 ) },
    { glm::vec3(-1.000000, 1.000000, 1.000000    ), glm::vec3( 1.000000, -0.000000, 0.000000   ) },
    { glm::vec3(-1.000000, -1.000000, 1.000000   ), glm::vec3(  1.000000, -0.000000, 0.000000  ) },
    { glm::vec3(-1.000000, 1.000000, -1.000000   ), glm::vec3(  -0.000000, -1.000000, -0.000000) },
    { glm::vec3(1.000000, 1.000000, -1.000000    ), glm::vec3( -0.000000, -1.000000, -0.000000 ) },
    { glm::vec3(1.000000, 0.999999, 1.000000     ), glm::vec3(-0.000000, -1.000000, -0.000000  ) },
    { glm::vec3(-1.000000, 1.000000, -1.000000   ), glm::vec3(  0.000000, 0.000000, 1.000000   ) },
    { glm::vec3(0.999999, -1.000001, 1.000000    ), glm::vec3( 0.000000, -0.000000, -1.000000  ) },
    { glm::vec3(0.999999, -1.000001, 1.000000    ), glm::vec3( -1.000000, 0.000000, -0.000000  ) },
    { glm::vec3(1.000000, 1.000000, -1.000000    ), glm::vec3( -1.000000, 0.000000, -0.000000  ) },
    { glm::vec3(1.000000, -1.000000, -1.000000   ), glm::vec3(  -1.000000, 0.000000, -0.000000 ) },
    { glm::vec3(-1.000000, -1.000000, -1.000000  ), glm::vec3(   0.000000, 1.000000, -0.000000 ) },
    { glm::vec3(-1.000000, 1.000000, -1.000000   ), glm::vec3(  1.000000, -0.000000, 0.000000  ) },
    { glm::vec3(-1.000000, 1.000000, 1.000000    ), glm::vec3( -0.000000, -1.000000, -0.000000 ) }
    //{ glm::vec3(1.000000, 1.000000, -1.000000 ), glm::vec3( 0.000000, 0.000000, -1.000000 ) },
    //{ glm::vec3(1.000000, -1.000000, -1.000000 ), glm::vec3( 0.000000, 0.000000, -1.000000 ) },
    //{ glm::vec3(-1.000000, -1.000000, -1.000000 ), glm::vec3( 0.000000, 0.000000, -1.000000 ) },
    //{ glm::vec3(1.000000, 0.999999, 1.000000 ), glm::vec3(-0.000000, 0.000000, 1.000000 ) },
    //{ glm::vec3(-1.000000, 1.000000, 1.000000 ), glm::vec3( -0.000000, 0.000000, 1.000000 ) },
    //{ glm::vec3(-1.000000, -1.000000, 1.000000 ), glm::vec3( -0.000000, 0.000000, 1.000000 ) },
    //{ glm::vec3(1.000000, 1.000000, -1.000000 ), glm::vec3( 1.000000, -0.000001, -0.000000 ) },
    //{ glm::vec3(1.000000, 0.999999, 1.000000 ), glm::vec3(1.000000, -0.000001, -0.000000 ) },
    //{ glm::vec3(0.999999, -1.000001, 1.000000 ), glm::vec3( 1.000000, -0.000001, -0.000000 ) },
    //{ glm::vec3(1.000000, -1.000000, -1.000000 ), glm::vec3( -0.000000, -1.000000, -0.000000) },
    //{ glm::vec3(0.999999, -1.000001, 1.000000 ), glm::vec3( -0.000000, -1.000000, -0.000000 ) },
    //{ glm::vec3(-1.000000, -1.000000, 1.000000 ), glm::vec3( -0.000000, -1.000000, -0.000000) },
    //{ glm::vec3(-1.000000, -1.000000, -1.000000 ), glm::vec3( -1.000000, 0.000000, -0.000000) },
    //{ glm::vec3(-1.000000, -1.000000, 1.000000 ), glm::vec3( -1.000000, 0.000000, -0.000000 ) },
    //{ glm::vec3(-1.000000, 1.000000, 1.000000 ), glm::vec3( -1.000000, 0.000000, -0.000000 ) },
    //{ glm::vec3(1.000000, 0.999999, 1.000000 ), glm::vec3(0.000000, 1.000000, 0.000000 ) },
    //{ glm::vec3(1.000000, 1.000000, -1.000000 ), glm::vec3( 0.000000, 1.000000, 0.000000 ) },
    //{ glm::vec3(-1.000000, 1.000000, -1.000000 ), glm::vec3( 0.000000, 1.000000, 0.000000 ) },
    //{ glm::vec3(-1.000000, 1.000000, -1.000000 ), glm::vec3( 0.000000, 0.000000, -1.000000 ) },
    //{ glm::vec3(0.999999, -1.000001, 1.000000 ), glm::vec3( -0.000000, 0.000000, 1.000000 ) },
    //{ glm::vec3(1.000000, -1.000000, -1.000000 ), glm::vec3( 1.000000, 0.000000, 0.000000 ) },
    //{ glm::vec3(1.000000, 1.000000, -1.000000 ), glm::vec3( 1.000000, 0.000000, 0.000000 ) },
    //{ glm::vec3(0.999999, -1.000001, 1.000000 ), glm::vec3( 1.000000, 0.000000, 0.000000 ) },
    //{ glm::vec3(-1.000000, -1.000000, -1.000000 ), glm::vec3( -0.000000, -1.000000, 0.000000) },
    //{ glm::vec3(-1.000000, 1.000000, -1.000000 ), glm::vec3( -1.000000, 0.000000, -0.000000 ) },
    //{ glm::vec3(-1.000000, 1.000000, 1.000000 ), glm::vec3( 0.000000, 1.000000, 0.000000 ) }
  };
  static const size_t NumVertices = sizeof(Vertices)/sizeof(Vertices[0]);

  static const unsigned short Indices[] =
  {
    0, 1, 2,
    3, 4, 5,
    6, 7, 8,
    9, 10, 11,
    12, 13, 14,
    15, 16, 17,
    18, 0, 2,
    19, 3, 5,
    20, 21, 22,
    23, 9, 11,
    24, 12, 14,
    25, 15, 17
  };
  static const size_t NumIndices = sizeof(Indices)/sizeof(Indices[0]);

} // Cube
